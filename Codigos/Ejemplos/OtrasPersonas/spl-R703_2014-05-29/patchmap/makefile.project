#-*-makefile-*-
# makefile.project for C/C++/CUDA code that uses PCL
# vona 12/2013
# project-specific things are set here
# the makefile itself is project-independent

# package names of dependencies to find with generic methods
# define WITH_FOO below to link against package foo listed here
# these are linked in order and before OpenNI, VTK, Boost, and CUDA
# if $(2)_FLAGS and $(2)_LIBS are defined here then they are used directly
# else the package is found by one of the following methods:
# WITH_$(2) = pkg-config or 1 : use pkg-config
# WITH_$(2) = cmake           : use cmake --find-package
# WITH_$(2) = something else  : expect it in dir $(WITH_$(2))/$(1)
GEN_DEPS := imucam rxkinfu

# whether build with the indicated library
# these come first b/c the definitions of some other things may depend on them
WITH_PCL ?= 1 # see PCL_MODULES below
WITH_IMUCAM ?= ../..
WITH_RXKINFU ?= ../..
WITH_OPENNI ?= 1 # package name openni-dev, found with pkg-config by default
WITH_VTK ?= 1 # found with cmake --find-package by default
WITH_BOOST ?= 1 # custom find
WITH_CUDA ?= 1 # custom find

# project name
# DEF_PROJECT is the (last component of the) project directory name
PROJECT = $(DEF_PROJECT)

# list all the exectuables to be compiled here
# %.bin actually creates % without the .bin extension
# set this before expanding DEF_PROJECT_LIB_DEPS as that depends on this
# BIN_TARGETS := $(PROJECT).bin target1.bin target2.bin
BIN_TARGETS := test_filter_nms.bin test_rexp.bin test_patch_residual.bin test_patch_coverage.bin test_patch_sample.bin test_patch_plot.bin test_patch_fit.bin test_patch_match.bin test_patch_load.bin test_autoseg.bin test_play_picks.bin test_map_kinfu_app.bin test_segmentation.bin pick_kinfu_app.bin test_map_kinfu_match.bin #test_imucam_autoseg.bin

# DEF_PROJECT_LIB_DEPS are .o files for every .c, .cpp, and .cu file (iff
# WITH_CUDA=1) except foo.c* are skipped if there is a foo.bin target, and any
# source files named test* are skipped (assumption: foo.c or foo.cpp has a
# main() only if there is a foo.bin target or foo matches test*)
# use := here b/c it can be expensive to expand DEF_PROJECT_LIB_DEPS
$(PROJECT)_lib_deps := $(DEF_PROJECT_LIB_DEPS)

# list all the libraries to be compiled here
# %.lib actually creates %.a and %.$(SOEXT)
# LIB_TARGETS += lib1.lib lib2.lib
# this makes $(PROJECT).lib iff $(PROJECT)_lib_deps is nonempty
LIB_TARGETS := $(if $(value $(PROJECT)_lib_deps),$(PROJECT).lib)

# list all the document targets here
DOC_TARGETS := README.html

# the things that need to get built
# usually this the union of $(BIN_TARGETS) and $(LIB_TARGETS)
# use ?= to set it so that it can be overridden in environment or command line
TARGETS ?= $(BIN_TARGETS) $(LIB_TARGETS)

# PCL version to link against
PCL_VERSION ?= $(DEF_PCL_VERSION)

# everything will be compiled and linked with these PCL modules
# you can also specifiy additional modules on a per-target basis below
#PCL_MODULES ?= common
PCL_MODULES ?= common io visualization surface features filters

# when WITH_BOOST=1 $(DEF_BOOST_LIBS) are linked (defined in makefile)
# add any extra ones you may want here
#EXTRA_BOOST_LIBS = -lboost_atomic-mt -lboost_log-mt

# for each executable you can add extra flags and dependencies like this
# note: foo.bin will automatically depend on foo.o iff foo.c or foo.cpp exists
# target1_bin_flags = -baz
# target1_bin_deps = foo.h foo.o
# target1_bin_pcl_modules = features filters
#
# if you enabled the $(PROJECT).lib target above, and you are lazy, then you can
# use lines like this here for each foo.bin target:
# foo_bin_deps = $($(PROJECT)_lib_deps) # depend on all modules without a main
# or use this for all $(BIN_TARGETS)
$(foreach T,$(BIN_TARGETS),\
  $(eval $$(subst .,_,$(T))_deps = $$($(PROJECT)_lib_deps)))

# for each intermediate file foo.o you can also add extra flags and deps
# foo_o_flags = -bar
# foo_o_deps = foo.h
# foo_o_pcl_modules = io visualization

# general examples for adding common compile and link flags

# set source standard
#CFLAGS += -std=gnu99
#CXXFLAGS += -std=c++98
#CXXFLAGS += -std=gnu++98
#CXXFLAGS += -std=c++0x
#CXXFLAGS += -std=gnu++0x

# make gcc/g++ exit after first or N fatal errors
# the makefile will convert these to -ferror-limit for clang
#CXXFLAGS += -Wfatal-errors
#CFLAGS += -Wfatal-errors
CXXFLAGS += -fmax-errors=5
CFLAGS += -fmax-errors=5

# (note PCL modules with deps like this will usually include them automatically)
# CFLAGS += $(shell pkg-config --cflags libusb-1.0)
# LDLIBS += $(shell pkg-config --libs libusb-1.0)

README.html: PANDOC_HTML_OPTS += --toc

ifneq ($(STANDALONE_DOCS),1)
GPC_HOME ?= ../www-gpc
ifeq ($(shell [ -d $(GPC_HOME) ] && echo 1),1)
# build html for GPC site
  WWW_REL_HOME = ..
  WWW_INC = $(GPC_HOME)/include
  CSS = $(WWW_REL_HOME)/include/style.css
  GEN_HTML = gen-head.html gen-body-before.html gen-body-after.html
  PANDOC_HTML_OPTS += -H gen-head.html \
                      -B gen-body-before.html -A gen-body-after.html
  HTML_M4_EXTRA_DEPS += $(GEN_HTML)
  ZIP_EXCLUDE += $(GEN_HTML)
$(GEN_HTML): FORCE
	m4 -P $(HTML_GEN_DEFS) $(HTML_GEN_INC) $(HTML_M4_EXTRA) \
	$(WWW_INC)/$(@:.html=.m4) > $@
endif
endif
